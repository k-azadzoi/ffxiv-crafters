{"ast":null,"code":"const request = require('request-promise-native');\n\nmodule.exports = {\n  //standard request function\n  req(path, params) {\n    if (params && typeof params.snake_case !== 'undefined') params.snake_case = params.snake_case ? 1 : 0;\n    params = Object.assign({}, this.globalParams, params);\n    if (this.verbose) console.log(`Requesting ${path} with params: `, params);\n    return request({\n      uri: this.endpoint + path,\n      qs: params,\n      json: true\n    });\n  },\n\n  //JSON request function\n  reqJSON(path, body) {\n    if (this.verbose) console.log(`Requesting ${path} with body: `, body);\n    return request({\n      method: 'POST',\n      uri: this.endpoint + path,\n      body: body,\n      json: true\n    });\n  },\n\n  //handle both comma-separated strings, and string arrays, for CSV params\n  makeCSV(x) {\n    if (typeof x === 'undefined') return;\n    if (Array.isArray(x)) return x.join(',');\n    if (typeof x === 'string') return x;\n  },\n\n  throwError(method, param) {\n    return Error(`xivapi-js: Can't use ${method} without providing ${param}.`);\n  }\n\n};","map":{"version":3,"sources":["/Users/kencharette/on-campus/ffxiv-crafters/node_modules/xivapi-js/utils.js"],"names":["request","require","module","exports","req","path","params","snake_case","Object","assign","globalParams","verbose","console","log","uri","endpoint","qs","json","reqJSON","body","method","makeCSV","x","Array","isArray","join","throwError","param","Error"],"mappings":"AAAA,MAAMA,OAAO,GAAGC,OAAO,CAAC,wBAAD,CAAvB;;AAEAC,MAAM,CAACC,OAAP,GAAiB;AAChB;AACAC,EAAAA,GAAG,CAACC,IAAD,EAAOC,MAAP,EAAe;AACjB,QAAGA,MAAM,IAAI,OAAOA,MAAM,CAACC,UAAd,KAA6B,WAA1C,EACCD,MAAM,CAACC,UAAP,GAAoBD,MAAM,CAACC,UAAP,GAAoB,CAApB,GAAwB,CAA5C;AAEDD,IAAAA,MAAM,GAAGE,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkB,KAAKC,YAAvB,EAAqCJ,MAArC,CAAT;AAEA,QAAG,KAAKK,OAAR,EACCC,OAAO,CAACC,GAAR,CAAa,cAAaR,IAAK,gBAA/B,EAAgDC,MAAhD;AAED,WAAON,OAAO,CAAC;AACdc,MAAAA,GAAG,EAAE,KAAKC,QAAL,GAAgBV,IADP;AAEdW,MAAAA,EAAE,EAAEV,MAFU;AAGdW,MAAAA,IAAI,EAAE;AAHQ,KAAD,CAAd;AAKA,GAhBe;;AAkBhB;AACAC,EAAAA,OAAO,CAACb,IAAD,EAAOc,IAAP,EAAa;AACnB,QAAG,KAAKR,OAAR,EACCC,OAAO,CAACC,GAAR,CAAa,cAAaR,IAAK,cAA/B,EAA8Cc,IAA9C;AAED,WAAOnB,OAAO,CAAC;AACdoB,MAAAA,MAAM,EAAE,MADM;AAEdN,MAAAA,GAAG,EAAE,KAAKC,QAAL,GAAgBV,IAFP;AAGdc,MAAAA,IAAI,EAAEA,IAHQ;AAIdF,MAAAA,IAAI,EAAE;AAJQ,KAAD,CAAd;AAMA,GA7Be;;AA+BhB;AACAI,EAAAA,OAAO,CAACC,CAAD,EAAI;AACV,QAAG,OAAOA,CAAP,KAAc,WAAjB,EACC;AAED,QAAGC,KAAK,CAACC,OAAN,CAAcF,CAAd,CAAH,EACC,OAAOA,CAAC,CAACG,IAAF,CAAO,GAAP,CAAP;AACD,QAAG,OAAOH,CAAP,KAAc,QAAjB,EACC,OAAOA,CAAP;AACD,GAxCe;;AA0ChBI,EAAAA,UAAU,CAACN,MAAD,EAASO,KAAT,EAAgB;AACzB,WAAOC,KAAK,CAAE,wBAAuBR,MAAO,sBAAqBO,KAAM,GAA3D,CAAZ;AACA;;AA5Ce,CAAjB","sourcesContent":["const request = require('request-promise-native')\n\nmodule.exports = {\n\t//standard request function\n\treq(path, params) {\n\t\tif(params && typeof params.snake_case !== 'undefined')\n\t\t\tparams.snake_case = params.snake_case ? 1 : 0\n\n\t\tparams = Object.assign({}, this.globalParams, params)\n\n\t\tif(this.verbose)\n\t\t\tconsole.log(`Requesting ${path} with params: `, params)\n\n\t\treturn request({\n\t\t\turi: this.endpoint + path,\n\t\t\tqs: params,\n\t\t\tjson: true\n\t\t})\n\t},\n\n\t//JSON request function\n\treqJSON(path, body) {\n\t\tif(this.verbose)\n\t\t\tconsole.log(`Requesting ${path} with body: `, body)\n\n\t\treturn request({\n\t\t\tmethod: 'POST',\n\t\t\turi: this.endpoint + path,\n\t\t\tbody: body,\n\t\t\tjson: true\n\t\t})\n\t},\n\n\t//handle both comma-separated strings, and string arrays, for CSV params\n\tmakeCSV(x) {\n\t\tif(typeof(x) === 'undefined')\n\t\t\treturn\n\n\t\tif(Array.isArray(x))\n\t\t\treturn x.join(',')\n\t\tif(typeof(x) === 'string')\n\t\t\treturn x\n\t},\n\n\tthrowError(method, param) {\n\t\treturn Error(`xivapi-js: Can't use ${method} without providing ${param}.`)\n\t}\n}\n"]},"metadata":{},"sourceType":"script"}