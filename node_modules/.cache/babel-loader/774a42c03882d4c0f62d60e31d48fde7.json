{"ast":null,"code":"let _require = require('../utils'),\n    req = _require.req,\n    reqJSON = _require.reqJSON,\n    makeCSV = _require.makeCSV,\n    throwError = _require.throwError;\n/*\n{\n\tfilters\n\tlore\n\n\tstring_column\n\tstring_algo\n\tlimit\n}\n*/\n\n\nmodule.exports = function (input, params = {}) {\n  req = req.bind(this);\n  reqJSON = reqJSON.bind(this);\n  return new Promise((resolve, reject) => {\n    if (typeof input === 'undefined') reject(throwError('search()', 'any input'));\n    let path = params.lore ? '/lore' : '/search';\n\n    switch (typeof input) {\n      // GET method\n      case 'string':\n        params.indexes = makeCSV(params.indexes);\n        req(path, Object.assign(params, {\n          string: input\n        })).then(res => {\n          resolve(res);\n        }).catch(err => {\n          reject(err);\n        });\n        break;\n      // ElasticSearch JSON method\n\n      case 'object':\n        input.indexes = makeCSV(params.indexes);\n        reqJSON(path, input).then(res => {\n          resolve(res);\n        }).catch(err => {\n          reject(err);\n        });\n        break;\n\n      default:\n        reject(Error(`Unexpected input type for search: '${typeof input}'`));\n        break;\n    }\n  });\n};","map":{"version":3,"sources":["/Users/kencharette/on-campus/ffxiv-crafters/node_modules/xivapi-js/lib/search.js"],"names":["require","req","reqJSON","makeCSV","throwError","module","exports","input","params","bind","Promise","resolve","reject","path","lore","indexes","Object","assign","string","then","res","catch","err","Error"],"mappings":"eAA4CA,OAAO,CAAC,UAAD,C;IAA7CC,G,YAAAA,G;IAAKC,O,YAAAA,O;IAASC,O,YAAAA,O;IAASC,U,YAAAA,U;AAE7B;;;;;;;;;;;;AAUAC,MAAM,CAACC,OAAP,GAAiB,UAASC,KAAT,EAAgBC,MAAM,GAAG,EAAzB,EAA6B;AAC7CP,EAAAA,GAAG,GAAGA,GAAG,CAACQ,IAAJ,CAAS,IAAT,CAAN;AACAP,EAAAA,OAAO,GAAGA,OAAO,CAACO,IAAR,CAAa,IAAb,CAAV;AAEA,SAAO,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACvC,QAAG,OAAOL,KAAP,KAAkB,WAArB,EACCK,MAAM,CAACR,UAAU,CAAC,UAAD,EAAa,WAAb,CAAX,CAAN;AAED,QAAIS,IAAI,GAAGL,MAAM,CAACM,IAAP,GAAc,OAAd,GAAwB,SAAnC;;AAEA,YAAO,OAAOP,KAAd;AACC;AACA,WAAK,QAAL;AACCC,QAAAA,MAAM,CAACO,OAAP,GAAiBZ,OAAO,CAACK,MAAM,CAACO,OAAR,CAAxB;AAEAd,QAAAA,GAAG,CACFY,IADE,EAEFG,MAAM,CAACC,MAAP,CAAcT,MAAd,EAAsB;AAACU,UAAAA,MAAM,EAAEX;AAAT,SAAtB,CAFE,CAAH,CAGEY,IAHF,CAGQC,GAAD,IAAS;AACfT,UAAAA,OAAO,CAACS,GAAD,CAAP;AACA,SALD,EAKGC,KALH,CAKUC,GAAD,IAAS;AACjBV,UAAAA,MAAM,CAACU,GAAD,CAAN;AACA,SAPD;AAQA;AAED;;AACA,WAAK,QAAL;AACCf,QAAAA,KAAK,CAACQ,OAAN,GAAgBZ,OAAO,CAACK,MAAM,CAACO,OAAR,CAAvB;AAEAb,QAAAA,OAAO,CACNW,IADM,EAENN,KAFM,CAAP,CAGEY,IAHF,CAGQC,GAAD,IAAS;AACfT,UAAAA,OAAO,CAACS,GAAD,CAAP;AACA,SALD,EAKGC,KALH,CAKUC,GAAD,IAAS;AACjBV,UAAAA,MAAM,CAACU,GAAD,CAAN;AACA,SAPD;AAQA;;AAED;AACCV,QAAAA,MAAM,CAACW,KAAK,CAAE,sCAAqC,OAAOhB,KAAO,GAArD,CAAN,CAAN;AACA;AA/BF;AAiCA,GAvCM,CAAP;AAwCA,CA5CD","sourcesContent":["let { req, reqJSON, makeCSV, throwError } = require('../utils')\n\n/*\n{\n\tfilters\n\tlore\n\n\tstring_column\n\tstring_algo\n\tlimit\n}\n*/\nmodule.exports = function(input, params = {}) {\n\treq = req.bind(this)\n\treqJSON = reqJSON.bind(this)\n\n\treturn new Promise((resolve, reject) => {\n\t\tif(typeof(input) === 'undefined')\n\t\t\treject(throwError('search()', 'any input'))\n\n\t\tlet path = params.lore ? '/lore' : '/search'\n\n\t\tswitch(typeof(input)) {\n\t\t\t// GET method\n\t\t\tcase 'string':\n\t\t\t\tparams.indexes = makeCSV(params.indexes)\n\n\t\t\t\treq(\n\t\t\t\t\tpath,\n\t\t\t\t\tObject.assign(params, {string: input})\n\t\t\t\t).then((res) => {\n\t\t\t\t\tresolve(res)\n\t\t\t\t}).catch((err) => {\n\t\t\t\t\treject(err)\n\t\t\t\t})\n\t\t\t\tbreak\n\n\t\t\t// ElasticSearch JSON method\n\t\t\tcase 'object':\n\t\t\t\tinput.indexes = makeCSV(params.indexes)\n\n\t\t\t\treqJSON(\n\t\t\t\t\tpath,\n\t\t\t\t\tinput\n\t\t\t\t).then((res) => {\n\t\t\t\t\tresolve(res)\n\t\t\t\t}).catch((err) => {\n\t\t\t\t\treject(err)\n\t\t\t\t})\n\t\t\t\tbreak\n\n\t\t\tdefault:\n\t\t\t\treject(Error(`Unexpected input type for search: '${typeof(input)}'`))\n\t\t\t\tbreak\n\t\t}\n\t})\n}\n"]},"metadata":{},"sourceType":"script"}